{
  "address": "0x867fe1461fc8A8A536AB0420FA866eEe19622a7d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ytcContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_n",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_trancheAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerPoolId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expectedYtOutput",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expectedBaseTokensSpent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_yieldToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_uniswapContract",
          "type": "address"
        }
      ],
      "name": "compoundUniswap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ytcContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_n",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_trancheAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerPoolId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expectedYtOutput",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expectedBaseTokensSpent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_yieldToken",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_zapperCallData",
          "type": "bytes"
        },
        {
          "internalType": "address payable",
          "name": "_zapperContract",
          "type": "address"
        }
      ],
      "name": "compoundZapper",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4875ab104eeff80511feb5ba3fc527be94d8c6b81937bf99dce5ccf4452369c0",
  "receipt": {
    "to": null,
    "from": "0x7C48AfFCe5dA0a826D048c566487E9F8CE8A2cb3",
    "contractAddress": "0x867fe1461fc8A8A536AB0420FA866eEe19622a7d",
    "transactionIndex": 0,
    "gasUsed": "845942",
    "logsBloom": "0x
    "blockHash": "0x03a1063c88e96f3c135da1e9fa2480b1d2ab793b548a695b13b87111b02eac6a",
    "transactionHash": "0x4875ab104eeff80511feb5ba3fc527be94d8c6b81937bf99dce5ccf4452369c0",
    "logs": [],
    "blockNumber": 13712042,
    "cumulativeGasUsed": "845942",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "422f40b1b5f95c9fac8df65c5aa49f05",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ytcContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_n\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_trancheAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedYtOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedBaseTokensSpent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yieldToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_uniswapContract\",\"type\":\"address\"}],\"name\":\"compoundUniswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ytcContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_n\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_trancheAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedYtOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedBaseTokensSpent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yieldToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_zapperCallData\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"_zapperContract\",\"type\":\"address\"}],\"name\":\"compoundZapper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"yield token compounding without having to swap to basetokens from ETH manually\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YTCZap.sol\":\"YTCZap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/IYieldTokenCompounding.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\ninterface IYieldTokenCompounding {\\n    function compound(\\n        uint8 _n,\\n        address _trancheAddress,\\n        bytes32 _balancerPoolId,\\n        uint256 _amount,\\n        uint256 _expectedYtOutput,\\n        uint256 _expectedBaseTokensSpent\\n    ) external returns (uint256, uint256);\\n\\n    function approveTranchePTOnBalancer(address _trancheAddress) external;\\n\\n    function checkTranchePTAllowanceOnBalancer(address _trancheAddress) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5800aba2da6532b283ac8c1d7e877d4512260730956bccf4e9ea401724035acd\"},\"contracts/YTCZap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IYieldTokenCompounding.sol\\\";\\nimport \\\"./balancer-core-v2/lib/openzeppelin/IERC20.sol\\\";\\nimport \\\"./balancer-core-v2/lib/openzeppelin/SafeMath.sol\\\";\\nimport \\\"./balancer-core-v2/lib/openzeppelin/SafeERC20.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\n/// @notice yield token compounding without having to swap to basetokens from ETH manually\\ncontract YTCZap {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    constructor(){\\n    }\\n\\n    // no-one other than the blackhole address should be able to call this contract\\n    // It will eat your tokens!!!\\n    modifier onlyBlackHole {\\n        require(msg.sender == address(57005));\\n        _;\\n    }\\n\\n    struct YTCInputs {\\n        IYieldTokenCompounding ytcContract;\\n        uint8 n;\\n        address trancheAddress;\\n        bytes32 balancerPoolId;\\n        uint256 amount;\\n        uint256 expectedYtOutput;\\n        uint256 expectedBaseTokensSpent;\\n        address baseToken;\\n        address yieldToken;\\n    }\\n\\n    struct SwapInputs {\\n        uint256 deadline;\\n        address payable uniswapContract;\\n        bytes zapperCallData;\\n        address payable zapperContract;\\n    }\\n\\n\\n\\n    function compoundUniswap(\\n        address _ytcContractAddress,\\n        uint8 _n,\\n        address _trancheAddress,\\n        bytes32 _balancerPoolId,\\n        uint256 _amount,\\n        uint256 _expectedYtOutput,\\n        uint256 _expectedBaseTokensSpent,\\n        address _baseToken,\\n        address _yieldToken,\\n        uint256 _deadline,\\n        address payable _uniswapContract\\n    ) external payable onlyBlackHole returns (uint256, uint256) {\\n        YTCInputs memory ytcInputs;\\n\\n        // We need to do this in two separate blocks due to local variable limits\\n        {\\n            ytcInputs.ytcContract = IYieldTokenCompounding(_ytcContractAddress);\\n            ytcInputs.n = _n;\\n            ytcInputs.trancheAddress = _trancheAddress;\\n            ytcInputs.balancerPoolId = _balancerPoolId;\\n            ytcInputs.expectedYtOutput = _expectedYtOutput;\\n        }\\n        {\\n            ytcInputs.amount = _amount;\\n            ytcInputs.expectedBaseTokensSpent = _expectedBaseTokensSpent;\\n            ytcInputs.baseToken = _baseToken;\\n            ytcInputs.yieldToken = _yieldToken;\\n        }\\n\\n        SwapInputs memory swapInputs;\\n        {\\n            swapInputs.deadline = _deadline;\\n            swapInputs.uniswapContract = _uniswapContract;\\n        }\\n\\n        return _compound(\\n            ytcInputs,\\n            swapInputs,\\n            1\\n        );\\n    }\\n    \\n    function compoundZapper(\\n        address _ytcContractAddress,\\n        uint8 _n,\\n        address _trancheAddress,\\n        bytes32 _balancerPoolId,\\n        uint256 _amount,\\n        uint256 _expectedYtOutput,\\n        uint256 _expectedBaseTokensSpent,\\n        address _baseToken,\\n        address _yieldToken,\\n        bytes calldata _zapperCallData,\\n        address payable _zapperContract\\n    ) external payable onlyBlackHole returns (uint256, uint256) {\\n        YTCInputs memory ytcInputs;\\n\\n        // We need to do this in two separate blocks due to local variable limits\\n        {\\n            ytcInputs.ytcContract = IYieldTokenCompounding(_ytcContractAddress);\\n            ytcInputs.n = _n;\\n            ytcInputs.trancheAddress = _trancheAddress;\\n            ytcInputs.balancerPoolId = _balancerPoolId;\\n            ytcInputs.expectedYtOutput = _expectedYtOutput;\\n        }\\n        {\\n            ytcInputs.amount = _amount;\\n            ytcInputs.expectedBaseTokensSpent = _expectedBaseTokensSpent;\\n            ytcInputs.baseToken = _baseToken;\\n            ytcInputs.yieldToken = _yieldToken;\\n        }\\n\\n        SwapInputs memory swapInputs;\\n        {\\n            swapInputs.zapperCallData = _zapperCallData;\\n            swapInputs.zapperContract = _zapperContract;\\n        }\\n\\n        return _compound(\\n            ytcInputs,\\n            swapInputs,\\n            0\\n        );\\n    }\\n    \\n    // Requires all the same inputs as YieldTokenCompoundingSwap + the address of the base token, the yield token, and the zapper information\\n    function _compound(\\n        YTCInputs memory ytcInputs,\\n        SwapInputs memory swapInputs,\\n        uint256 _type\\n    ) internal returns (uint256, uint256) {\\n\\n\\n        uint256 swappedAmount;\\n        {\\n            // get the initial balance of the base tokens\\n            uint256 initialBalance = _getBalance(ytcInputs.baseToken);\\n\\n            // execute the correct swap based on the type\\n            if (_type == 0){\\n                _executeCurveSwap(msg.value, ytcInputs.baseToken, swapInputs.zapperContract, swapInputs.zapperCallData);\\n            } else if (_type == 1){\\n                _executeUniswapSwap(msg.value, ytcInputs.baseToken, ytcInputs.amount, swapInputs.deadline, swapInputs.uniswapContract);\\n            }\\n\\n            // calculate the amount that was received in the swap\\n            swappedAmount = _getBalance(ytcInputs.baseToken).sub(initialBalance);\\n\\n            // if the swappedAmount isn't greater than 0, something went wrong\\n            require (swappedAmount > 0, \\\"Swapped to Invalid Token\\\"); \\n            // if the swappedAmount isn't greater than the compounding amount, the compounding will fail\\n            require(swappedAmount >= ytcInputs.amount, \\\"Not enough tokens received in swap\\\");\\n        }\\n\\n        // approve the ytc contract to spend the base token\\n        IERC20(ytcInputs.baseToken).approve(address(ytcInputs.ytcContract), ytcInputs.amount);\\n\\n        // Run the ytc contract\\n        uint256 yieldTokensReceived;\\n        uint256 baseTokensSpent;\\n        {\\n            (yieldTokensReceived, baseTokensSpent ) = ytcInputs.ytcContract.compound(ytcInputs.n, ytcInputs.trancheAddress, ytcInputs.balancerPoolId, ytcInputs.amount, ytcInputs.expectedYtOutput, ytcInputs.expectedBaseTokensSpent);\\n        }\\n\\n        // transfer the received yield tokens, and the remaining baseTokens\\n        IERC20(ytcInputs.baseToken).safeTransfer(msg.sender, swappedAmount - baseTokensSpent);\\n        IERC20(ytcInputs.yieldToken).safeTransfer(msg.sender, yieldTokensReceived);\\n\\n        return (yieldTokensReceived, baseTokensSpent);\\n    }\\n    \\n    function _executeCurveSwap(uint256 _value, address _baseToken, address payable _zapperContract, bytes memory _zapperCallData) private {\\n        (bool success, ) = _zapperContract.call{value: _value}(_zapperCallData);\\n\\n        require(success, \\\"Zap Failed\\\");\\n    }\\n\\n    function _executeUniswapSwap(uint256 _value, address _baseToken, uint256 _amount, uint256 _deadline, address _uniswapRouterAddress) private{\\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(_uniswapRouterAddress);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = uniswapRouter.WETH();\\n        path[1] = _baseToken;\\n\\n        uniswapRouter.swapExactETHForTokens{value: _value}(_amount, path, address(this), _deadline);\\n    }\\n\\n    function _getBalance(address token)\\n        internal\\n        view\\n        returns (uint256 balance)\\n    {\\n        if (token == address(0)) {\\n            balance = address(this).balance;\\n        } else {\\n            balance = IERC20(token).balanceOf(address(this));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc7ec33b7e052c8580624d05e4428a6ad02ba22ac81d86bd9c6cf78ae822f67a\",\"license\":\"GPL-3.0\"},\"contracts/balancer-core-v2/lib/helpers/BalancerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"BAL#\\\" part is a known constant\\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x4fccd72b44004509b27032aa9e9e91a24becaa67d65b79564e41cb99758f80d4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/balancer-core-v2/lib/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76\",\"license\":\"MIT\"},\"contracts/balancer-core-v2/lib/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        _require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\",\"keccak256\":\"0x16d3e14c841b54a0f59fac0b899c4fa2f7b15d8d24f562a91edaf5aa140d57f5\",\"license\":\"MIT\"},\"contracts/balancer-core-v2/lib/openzeppelin/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, uint256 errorCode) internal pure returns (uint256) {\\n        _require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xafe0542eb14932a66ce6280fbe9991130ead5bbcb7836d0a822fc4a59810c100\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610e57806100206000396000f3fe6080604052600436106100295760003560e01c80631a63eb741461002e578063f0cc20e814610058575b600080fd5b61004161003c3660046109b4565b61006b565b60405161004f929190610da2565b60405180910390f35b610041610066366004610a8c565b6101af565b6000803361dead1461007c57600080fd5b6100846108b0565b8e81600001906001600160a01b031690816001600160a01b0316815250508d816020019060ff16908160ff16815250508c81604001906001600160a01b031690816001600160a01b0316815250508b816060018181525050898160a00181815250508a816080018181525050888160c0018181525050878160e001906001600160a01b031690816001600160a01b031681525050868161010001906001600160a01b031690816001600160a01b03168152505061013f6108fc565b86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060408601949094525050506001600160a01b0386166060830152610198908390839061024e565b9350935050509c509c9a5050505050505050505050565b6000803361dead146101c057600080fd5b6101c86108b0565b6001600160a01b03808f16825260ff8e1660208301528c81166040830152606082018c905260a082018a9052608082018b905260c0820189905287811660e0830152861661010082015261021a6108fc565b8581526001600160a01b03851660208201526102388282600161024e565b9350935050509b509b9950505050505050505050565b6000806000806102618760e0015161048b565b90508461028557610280348860e0015188606001518960400151610526565b6102ab565b84600114156102ab576102ab348860e00151896080015189600001518a602001516105ab565b6102c2816102bc8960e0015161048b565b9061071f565b9150600082116102ed5760405162461bcd60e51b81526004016102e490610ca1565b60405180910390fd5b86608001518210156103115760405162461bcd60e51b81526004016102e490610cf7565b5060e08601518651608088015160405163095ea7b360e01b81526001600160a01b039093169263095ea7b39261034b929091600401610c88565b602060405180830381600087803b15801561036557600080fd5b505af1158015610379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039d9190610be0565b5060008087600001516001600160a01b031663117d8d0b89602001518a604001518b606001518c608001518d60a001518e60c001516040518763ffffffff1660e01b81526004016103f396959493929190610db0565b6040805180830381600087803b15801561040c57600080fd5b505af1158015610420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104449190610c18565b60e08a01519193509150610464906001600160a01b031633838603610734565b61010088015161047e906001600160a01b03163384610734565b9097909650945050505050565b60006001600160a01b0382166104a2575047610521565b6040516370a0823160e01b81526001600160a01b038316906370a08231906104ce903090600401610c74565b60206040518083038186803b1580156104e657600080fd5b505afa1580156104fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051e9190610c00565b90505b919050565b6000826001600160a01b031685836040516105419190610c3b565b60006040518083038185875af1925050503d806000811461057e576040519150601f19603f3d011682016040523d82523d6000602084013e610583565b606091505b50509050806105a45760405162461bcd60e51b81526004016102e490610cd3565b5050505050565b60408051600280825260608083018452849390929190602083019080368337019050509050816001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561060957600080fd5b505afa15801561061d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106419190610998565b8160008151811061064e57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061067c57fe5b6001600160a01b039283166020918202929092010152604051637ff36ab560e01b815290831690637ff36ab59089906106bf908990869030908b90600401610d39565b6000604051808303818588803b1580156106d857600080fd5b505af11580156106ec573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526107159190810190610b40565b5050505050505050565b600061072d8383600161078f565b9392505050565b61078a8363a9059cbb60e01b8484604051602401610753929190610c88565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526107a5565b505050565b600061079e848411158361084b565b5050900390565b60006060836001600160a01b0316836040516107c19190610c3b565b6000604051808303816000865af19150503d80600081146107fe576040519150601f19603f3d011682016040523d82523d6000602084013e610803565b606091505b5091509150600082141561081b573d6000803e3d6000fd5b61084581516000148061083d57508180602001905181019061083d9190610be0565b6101a261084b565b50505050565b81610859576108598161085d565b5050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b60405180608001604052806000815260200160006001600160a01b031681526020016060815260200160006001600160a01b031681525090565b803561052181610e09565b60008083601f840112610952578182fd5b5081356001600160401b03811115610968578182fd5b60208301915083602082850101111561098057600080fd5b9250929050565b803560ff8116811461052157600080fd5b6000602082840312156109a9578081fd5b815161072d81610e09565b6000806000806000806000806000806000806101608d8f0312156109d6578788fd5b6109e08d35610e09565b8c359b506109f060208e01610987565b9a506109ff60408e0135610e09565b60408d0135995060608d0135985060808d0135975060a08d0135965060c08d01359550610a2e60e08e01610936565b9450610a3d6101008e01610936565b93506001600160401b036101208e01351115610a57578283fd5b610a688e6101208f01358f01610941565b9093509150610a7a6101408e01610936565b90509295989b509295989b509295989b565b60008060008060008060008060008060006101608c8e031215610aad578081fd5b8b35610ab881610e09565b9a50610ac660208d01610987565b995060408c0135610ad681610e09565b985060608c0135975060808c0135965060a08c0135955060c08c0135945060e08c0135610b0281610e09565b93506101008c0135610b1381610e09565b92506101208c013591506101408c0135610b2c81610e09565b809150509295989b509295989b9093969950565b60006020808385031215610b52578182fd5b82516001600160401b0380821115610b68578384fd5b818501915085601f830112610b7b578384fd5b815181811115610b8757fe5b8381029150610b97848301610de6565b8181528481019084860184860187018a1015610bb1578788fd5b8795505b83861015610bd3578051835260019590950194918601918601610bb5565b5098975050505050505050565b600060208284031215610bf1578081fd5b8151801515811461072d578182fd5b600060208284031215610c11578081fd5b5051919050565b60008060408385031215610c2a578182fd5b505080516020909101519092909150565b60008251815b81811015610c5b5760208186018101518583015201610c41565b81811115610c695782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60208082526018908201527729bbb0b83832b2103a379024b73b30b634b2102a37b5b2b760411b604082015260600190565b6020808252600a908201526916985c0811985a5b195960b21b604082015260600190565b60208082526022908201527f4e6f7420656e6f75676820746f6b656e7320726563656976656420696e207377604082015261061760f41b606082015260800190565b600060808201868352602060808185015281875180845260a0860191508289019350845b81811015610d825784516001600160a01b031683529383019391830191600101610d5d565b50506001600160a01b039690961660408501525050506060015292915050565b918252602082015260400190565b60ff9690961686526001600160a01b0394909416602086015260408501929092526060840152608083015260a082015260c00190565b6040518181016001600160401b0381118282101715610e0157fe5b604052919050565b6001600160a01b0381168114610e1e57600080fd5b5056fea26469706673582212200a6ca7646c31c98b713d74140cd114260e42bda33b4d046d005d605a2349d48064736f6c63430007030033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c80631a63eb741461002e578063f0cc20e814610058575b600080fd5b61004161003c3660046109b4565b61006b565b60405161004f929190610da2565b60405180910390f35b610041610066366004610a8c565b6101af565b6000803361dead1461007c57600080fd5b6100846108b0565b8e81600001906001600160a01b031690816001600160a01b0316815250508d816020019060ff16908160ff16815250508c81604001906001600160a01b031690816001600160a01b0316815250508b816060018181525050898160a00181815250508a816080018181525050888160c0018181525050878160e001906001600160a01b031690816001600160a01b031681525050868161010001906001600160a01b031690816001600160a01b03168152505061013f6108fc565b86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060408601949094525050506001600160a01b0386166060830152610198908390839061024e565b9350935050509c509c9a5050505050505050505050565b6000803361dead146101c057600080fd5b6101c86108b0565b6001600160a01b03808f16825260ff8e1660208301528c81166040830152606082018c905260a082018a9052608082018b905260c0820189905287811660e0830152861661010082015261021a6108fc565b8581526001600160a01b03851660208201526102388282600161024e565b9350935050509b509b9950505050505050505050565b6000806000806102618760e0015161048b565b90508461028557610280348860e0015188606001518960400151610526565b6102ab565b84600114156102ab576102ab348860e00151896080015189600001518a602001516105ab565b6102c2816102bc8960e0015161048b565b9061071f565b9150600082116102ed5760405162461bcd60e51b81526004016102e490610ca1565b60405180910390fd5b86608001518210156103115760405162461bcd60e51b81526004016102e490610cf7565b5060e08601518651608088015160405163095ea7b360e01b81526001600160a01b039093169263095ea7b39261034b929091600401610c88565b602060405180830381600087803b15801561036557600080fd5b505af1158015610379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039d9190610be0565b5060008087600001516001600160a01b031663117d8d0b89602001518a604001518b606001518c608001518d60a001518e60c001516040518763ffffffff1660e01b81526004016103f396959493929190610db0565b6040805180830381600087803b15801561040c57600080fd5b505af1158015610420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104449190610c18565b60e08a01519193509150610464906001600160a01b031633838603610734565b61010088015161047e906001600160a01b03163384610734565b9097909650945050505050565b60006001600160a01b0382166104a2575047610521565b6040516370a0823160e01b81526001600160a01b038316906370a08231906104ce903090600401610c74565b60206040518083038186803b1580156104e657600080fd5b505afa1580156104fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051e9190610c00565b90505b919050565b6000826001600160a01b031685836040516105419190610c3b565b60006040518083038185875af1925050503d806000811461057e576040519150601f19603f3d011682016040523d82523d6000602084013e610583565b606091505b50509050806105a45760405162461bcd60e51b81526004016102e490610cd3565b5050505050565b60408051600280825260608083018452849390929190602083019080368337019050509050816001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561060957600080fd5b505afa15801561061d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106419190610998565b8160008151811061064e57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061067c57fe5b6001600160a01b039283166020918202929092010152604051637ff36ab560e01b815290831690637ff36ab59089906106bf908990869030908b90600401610d39565b6000604051808303818588803b1580156106d857600080fd5b505af11580156106ec573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526107159190810190610b40565b5050505050505050565b600061072d8383600161078f565b9392505050565b61078a8363a9059cbb60e01b8484604051602401610753929190610c88565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526107a5565b505050565b600061079e848411158361084b565b5050900390565b60006060836001600160a01b0316836040516107c19190610c3b565b6000604051808303816000865af19150503d80600081146107fe576040519150601f19603f3d011682016040523d82523d6000602084013e610803565b606091505b5091509150600082141561081b573d6000803e3d6000fd5b61084581516000148061083d57508180602001905181019061083d9190610be0565b6101a261084b565b50505050565b81610859576108598161085d565b5050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b60405180608001604052806000815260200160006001600160a01b031681526020016060815260200160006001600160a01b031681525090565b803561052181610e09565b60008083601f840112610952578182fd5b5081356001600160401b03811115610968578182fd5b60208301915083602082850101111561098057600080fd5b9250929050565b803560ff8116811461052157600080fd5b6000602082840312156109a9578081fd5b815161072d81610e09565b6000806000806000806000806000806000806101608d8f0312156109d6578788fd5b6109e08d35610e09565b8c359b506109f060208e01610987565b9a506109ff60408e0135610e09565b60408d0135995060608d0135985060808d0135975060a08d0135965060c08d01359550610a2e60e08e01610936565b9450610a3d6101008e01610936565b93506001600160401b036101208e01351115610a57578283fd5b610a688e6101208f01358f01610941565b9093509150610a7a6101408e01610936565b90509295989b509295989b509295989b565b60008060008060008060008060008060006101608c8e031215610aad578081fd5b8b35610ab881610e09565b9a50610ac660208d01610987565b995060408c0135610ad681610e09565b985060608c0135975060808c0135965060a08c0135955060c08c0135945060e08c0135610b0281610e09565b93506101008c0135610b1381610e09565b92506101208c013591506101408c0135610b2c81610e09565b809150509295989b509295989b9093969950565b60006020808385031215610b52578182fd5b82516001600160401b0380821115610b68578384fd5b818501915085601f830112610b7b578384fd5b815181811115610b8757fe5b8381029150610b97848301610de6565b8181528481019084860184860187018a1015610bb1578788fd5b8795505b83861015610bd3578051835260019590950194918601918601610bb5565b5098975050505050505050565b600060208284031215610bf1578081fd5b8151801515811461072d578182fd5b600060208284031215610c11578081fd5b5051919050565b60008060408385031215610c2a578182fd5b505080516020909101519092909150565b60008251815b81811015610c5b5760208186018101518583015201610c41565b81811115610c695782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60208082526018908201527729bbb0b83832b2103a379024b73b30b634b2102a37b5b2b760411b604082015260600190565b6020808252600a908201526916985c0811985a5b195960b21b604082015260600190565b60208082526022908201527f4e6f7420656e6f75676820746f6b656e7320726563656976656420696e207377604082015261061760f41b606082015260800190565b600060808201868352602060808185015281875180845260a0860191508289019350845b81811015610d825784516001600160a01b031683529383019391830191600101610d5d565b50506001600160a01b039690961660408501525050506060015292915050565b918252602082015260400190565b60ff9690961686526001600160a01b0394909416602086015260408501929092526060840152608083015260a082015260c00190565b6040518181016001600160401b0381118282101715610e0157fe5b604052919050565b6001600160a01b0381168114610e1e57600080fd5b5056fea26469706673582212200a6ca7646c31c98b713d74140cd114260e42bda33b4d046d005d605a2349d48064736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "yield token compounding without having to swap to basetokens from ETH manually",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}