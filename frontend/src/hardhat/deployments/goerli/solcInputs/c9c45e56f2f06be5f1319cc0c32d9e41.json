{
  "language": "Solidity",
  "sources": {
    "contracts/IYieldTokenCompounding.sol": {
      "content": "pragma solidity ^0.7.0;\n\ninterface IYieldTokenCompounding {\n    function compound(\n        uint8 _n,\n        address _trancheAddress,\n        bytes32 _balancerPoolId,\n        uint256 _amount,\n        uint256 _expectedYtOutput,\n        uint256 _expectedBaseTokensSpent\n    ) external returns (uint256, uint256);\n\n    function approveTranchePTOnBalancer(address _trancheAddress) external;\n\n    function checkTranchePTAllowanceOnBalancer(address _trancheAddress) external view returns (uint256);\n}\n"
    },
    "contracts/YTCEthCurve.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./IYieldTokenCompounding.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IERC20.sol\";\n\n/// @notice yield token compounding without having to swap to basetokens from ETH manually\ncontract YTCEthCurve {\n    IYieldTokenCompounding public immutable ytcContract;\n    IUniswapV2Router02 public immutable uniswapRouter;\n\n    constructor(address _ytcAddress, address _uniswapRouterAddress){\n        ytcContract = IYieldTokenCompounding(_ytcAddress);\n        uniswapRouter = IUniswapV2Router02(_uniswapRouterAddress);\n    }\n    \n    struct Inputs {\n        uint8 _n;\n        address _trancheAddress;\n        bytes32 _balancerPoolId;\n        uint256 _expectedYtOutput;\n        uint256 _expectedBaseTokensSpent;\n        address _underlyingAddress;\n        address _yieldTokenAddress;\n        uint256 _amountUnderlying;\n        uint256 _deadline;\n    }\n    \n\n    // Requires all the same inputs as YieldTokenCompoundingSwap + the address of the underlying token\n    function compound(\n        uint8 _n,\n        address _trancheAddress,\n        bytes32 _balancerPoolId,\n        uint256 _expectedYtOutput,\n        uint256 _expectedBaseTokensSpent,\n        address _underlyingAddress,\n        address _yieldTokenAddress,\n        uint256 _amountUnderlying,\n        uint256 _deadline\n    ) external payable returns (uint256, uint256, uint256) {\n\n        Inputs memory inputs = Inputs(\n            _n,\n            _trancheAddress,\n            _balancerPoolId,\n            _expectedYtOutput,\n            _expectedBaseTokensSpent,\n            _underlyingAddress,\n            _yieldTokenAddress,\n            _amountUnderlying,\n            _deadline\n        );\n        \n        return _executeCompound(inputs);\n    }\n    \n    function _executeCompound(Inputs memory _inputs) private returns (uint256, uint256, uint256) {\n        // first swap ethe to _underlyingAddress Token\n        uint[] memory amounts = _executeSwap(msg.value, _inputs._underlyingAddress, _inputs._amountUnderlying, address(this), _inputs._deadline);\n\n        // then approve ytcPool on _underlyingAddress token\n        IERC20 underlyingTokens = IERC20(_inputs._underlyingAddress);\n        underlyingTokens.approve(address(ytcContract), amounts[1]);\n\n        // then run ytc.compound passing through the amount\n        (uint256 yieldTokensReceived, uint256 baseTokensSpent ) = ytcContract.compound(_inputs._n, _inputs._trancheAddress, _inputs._balancerPoolId, amounts[1], _inputs._expectedYtOutput, _inputs._expectedBaseTokensSpent);\n\n        // transfer yieldTokens back to msg.sender\n        IERC20 yieldToken = IERC20(_inputs._yieldTokenAddress);\n        yieldToken.transfer(msg.sender, yieldTokensReceived);\n\n        // transfer underlyingTokens to msg.sender\n        underlyingTokens.transfer(msg.sender, amounts[1] - baseTokensSpent);\n\n        return (amounts[1], yieldTokensReceived, baseTokensSpent);\n    }\n    \n    \n    function _executeSwap(uint256 _value, address _underlyingAddress, uint256 _amountUnderlying, address _receiveAddress, uint256 _deadline) private returns (uint[] memory amounts){\n        address[] memory path = new address[](2);\n        path[0] = uniswapRouter.WETH();\n        path[1] = _underlyingAddress;\n        return uniswapRouter.swapExactETHForTokens{value: _value}(_amountUnderlying, path, _receiveAddress, _deadline);\n    }\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IERC20.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/YTCEth.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./IYieldTokenCompounding.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IERC20.sol\";\n\n/// @notice yield token compounding without having to swap to basetokens from ETH manually\ncontract YTCEth {\n    IYieldTokenCompounding public immutable ytcContract;\n    IUniswapV2Router02 public immutable uniswapRouter;\n\n    constructor(address _ytcAddress, address _uniswapRouterAddress){\n        ytcContract = IYieldTokenCompounding(_ytcAddress);\n        uniswapRouter = IUniswapV2Router02(_uniswapRouterAddress);\n    }\n    \n    struct Inputs {\n        uint8 _n;\n        address _trancheAddress;\n        bytes32 _balancerPoolId;\n        uint256 _expectedYtOutput;\n        uint256 _expectedBaseTokensSpent;\n        address _underlyingAddress;\n        address _yieldTokenAddress;\n        uint256 _amountUnderlying;\n        uint256 _deadline;\n    }\n    \n\n    // Requires all the same inputs as YieldTokenCompoundingSwap + the address of the underlying token\n    function compound(\n        uint8 _n,\n        address _trancheAddress,\n        bytes32 _balancerPoolId,\n        uint256 _expectedYtOutput,\n        uint256 _expectedBaseTokensSpent,\n        address _underlyingAddress,\n        address _yieldTokenAddress,\n        uint256 _amountUnderlying,\n        uint256 _deadline\n    ) external payable returns (uint256, uint256, uint256) {\n\n        Inputs memory inputs = Inputs(\n            _n,\n            _trancheAddress,\n            _balancerPoolId,\n            _expectedYtOutput,\n            _expectedBaseTokensSpent,\n            _underlyingAddress,\n            _yieldTokenAddress,\n            _amountUnderlying,\n            _deadline\n        );\n        \n        return _executeCompound(inputs);\n    }\n    \n    function _executeCompound(Inputs memory _inputs) private returns (uint256, uint256, uint256) {\n        // first swap ethe to _underlyingAddress Token\n        uint[] memory amounts = _executeSwap(msg.value, _inputs._underlyingAddress, _inputs._amountUnderlying, address(this), _inputs._deadline);\n\n        // then approve ytcPool on _underlyingAddress token\n        IERC20 underlyingTokens = IERC20(_inputs._underlyingAddress);\n        underlyingTokens.approve(address(ytcContract), amounts[1]);\n\n        // then run ytc.compound passing through the amount\n        (uint256 yieldTokensReceived, uint256 baseTokensSpent ) = ytcContract.compound(_inputs._n, _inputs._trancheAddress, _inputs._balancerPoolId, amounts[1], _inputs._expectedYtOutput, _inputs._expectedBaseTokensSpent);\n\n        // transfer yieldTokens back to msg.sender\n        IERC20 yieldToken = IERC20(_inputs._yieldTokenAddress);\n        yieldToken.transfer(msg.sender, yieldTokensReceived);\n\n        // transfer underlyingTokens to msg.sender\n        underlyingTokens.transfer(msg.sender, amounts[1] - baseTokensSpent);\n\n        return (amounts[1], yieldTokensReceived, baseTokensSpent);\n    }\n    \n    \n    function _executeSwap(uint256 _value, address _underlyingAddress, uint256 _amountUnderlying, address _receiveAddress, uint256 _deadline) private returns (uint[] memory amounts){\n        address[] memory path = new address[](2);\n        path[0] = uniswapRouter.WETH();\n        path[1] = _underlyingAddress;\n        return uniswapRouter.swapExactETHForTokens{value: _value}(_amountUnderlying, path, _receiveAddress, _deadline);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 50
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}