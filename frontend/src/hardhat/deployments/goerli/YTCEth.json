{
  "address": "0xC5C14557eDF336731a44E35aCF4b9A3e2eAC3E72",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ytcAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouterAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_n",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_trancheAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerPoolId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_expectedYtOutput",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expectedBaseTokensSpent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_underlyingAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_yieldTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountUnderlying",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "compound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ytcContract",
      "outputs": [
        {
          "internalType": "contract IYieldTokenCompounding",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcdd8051e4a378268937db44a3bdd17b1f28701391b33ad8b0193ad3177c717e6",
  "receipt": {
    "to": null,
    "from": "0x7C48AfFCe5dA0a826D048c566487E9F8CE8A2cb3",
    "contractAddress": "0xC5C14557eDF336731a44E35aCF4b9A3e2eAC3E72",
    "transactionIndex": 5,
    "gasUsed": "572750",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xbca452640e7d2cc6e528c17c208854fca8c9fd78d1ce20b5dea74fecb7f6ca38",
    "transactionHash": "0xcdd8051e4a378268937db44a3bdd17b1f28701391b33ad8b0193ad3177c717e6",
    "logs": [],
    "blockNumber": 5890544,
    "cumulativeGasUsed": "1064262",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe4ecfc8aff5bea1e06618e862491e190239f4d1e",
    "0x7a250d5630b4cf539739df2c5dacb4c659f2488d"
  ],
  "solcInputHash": "c9c45e56f2f06be5f1319cc0c32d9e41",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ytcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_n\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_trancheAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_expectedYtOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedBaseTokensSpent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yieldTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"compound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ytcContract\",\"outputs\":[{\"internalType\":\"contract IYieldTokenCompounding\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"yield token compounding without having to swap to basetokens from ETH manually\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YTCEth.sol\":\"YTCEth\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"@uniswap/v2-periphery/contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x61db17aebc5d812c7002d15c1da954065e56abe49d64b14c034abe5604d70eb3\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/IYieldTokenCompounding.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\ninterface IYieldTokenCompounding {\\n    function compound(\\n        uint8 _n,\\n        address _trancheAddress,\\n        bytes32 _balancerPoolId,\\n        uint256 _amount,\\n        uint256 _expectedYtOutput,\\n        uint256 _expectedBaseTokensSpent\\n    ) external returns (uint256, uint256);\\n\\n    function approveTranchePTOnBalancer(address _trancheAddress) external;\\n\\n    function checkTranchePTAllowanceOnBalancer(address _trancheAddress) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5800aba2da6532b283ac8c1d7e877d4512260730956bccf4e9ea401724035acd\"},\"contracts/YTCEth.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IYieldTokenCompounding.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IERC20.sol\\\";\\n\\n/// @notice yield token compounding without having to swap to basetokens from ETH manually\\ncontract YTCEth {\\n    IYieldTokenCompounding public immutable ytcContract;\\n    IUniswapV2Router02 public immutable uniswapRouter;\\n\\n    constructor(address _ytcAddress, address _uniswapRouterAddress){\\n        ytcContract = IYieldTokenCompounding(_ytcAddress);\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouterAddress);\\n    }\\n    \\n    struct Inputs {\\n        uint8 _n;\\n        address _trancheAddress;\\n        bytes32 _balancerPoolId;\\n        uint256 _expectedYtOutput;\\n        uint256 _expectedBaseTokensSpent;\\n        address _underlyingAddress;\\n        address _yieldTokenAddress;\\n        uint256 _amountUnderlying;\\n        uint256 _deadline;\\n    }\\n    \\n\\n    // Requires all the same inputs as YieldTokenCompoundingSwap + the address of the underlying token\\n    function compound(\\n        uint8 _n,\\n        address _trancheAddress,\\n        bytes32 _balancerPoolId,\\n        uint256 _expectedYtOutput,\\n        uint256 _expectedBaseTokensSpent,\\n        address _underlyingAddress,\\n        address _yieldTokenAddress,\\n        uint256 _amountUnderlying,\\n        uint256 _deadline\\n    ) external payable returns (uint256, uint256, uint256) {\\n\\n        Inputs memory inputs = Inputs(\\n            _n,\\n            _trancheAddress,\\n            _balancerPoolId,\\n            _expectedYtOutput,\\n            _expectedBaseTokensSpent,\\n            _underlyingAddress,\\n            _yieldTokenAddress,\\n            _amountUnderlying,\\n            _deadline\\n        );\\n        \\n        return _executeCompound(inputs);\\n    }\\n    \\n    function _executeCompound(Inputs memory _inputs) private returns (uint256, uint256, uint256) {\\n        // first swap ethe to _underlyingAddress Token\\n        uint[] memory amounts = _executeSwap(msg.value, _inputs._underlyingAddress, _inputs._amountUnderlying, address(this), _inputs._deadline);\\n\\n        // then approve ytcPool on _underlyingAddress token\\n        IERC20 underlyingTokens = IERC20(_inputs._underlyingAddress);\\n        underlyingTokens.approve(address(ytcContract), amounts[1]);\\n\\n        // then run ytc.compound passing through the amount\\n        (uint256 yieldTokensReceived, uint256 baseTokensSpent ) = ytcContract.compound(_inputs._n, _inputs._trancheAddress, _inputs._balancerPoolId, amounts[1], _inputs._expectedYtOutput, _inputs._expectedBaseTokensSpent);\\n\\n        // transfer yieldTokens back to msg.sender\\n        IERC20 yieldToken = IERC20(_inputs._yieldTokenAddress);\\n        yieldToken.transfer(msg.sender, yieldTokensReceived);\\n\\n        // transfer underlyingTokens to msg.sender\\n        underlyingTokens.transfer(msg.sender, amounts[1] - baseTokensSpent);\\n\\n        return (amounts[1], yieldTokensReceived, baseTokensSpent);\\n    }\\n    \\n    \\n    function _executeSwap(uint256 _value, address _underlyingAddress, uint256 _amountUnderlying, address _receiveAddress, uint256 _deadline) private returns (uint[] memory amounts){\\n        address[] memory path = new address[](2);\\n        path[0] = uniswapRouter.WETH();\\n        path[1] = _underlyingAddress;\\n        return uniswapRouter.swapExactETHForTokens{value: _value}(_amountUnderlying, path, _receiveAddress, _deadline);\\n    }\\n}\\n\",\"keccak256\":\"0x1aabbdfd7530e5585a5f07013fc735fd509546991fb120d58d39b4587459d88e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610a34380380610a3483398101604081905261002f91610069565b6001600160601b0319606092831b8116608052911b1660a05261009b565b80516001600160a01b038116811461006457600080fd5b919050565b6000806040838503121561007b578182fd5b6100848361004d565b91506100926020840161004d565b90509250929050565b60805160601c60a05160601c61095e6100d660003980609d5280610495528061058452508060c152806101ac5280610255525061095e6000f3fe6080604052600436106100345760003560e01c8063735de9f714610039578063ab696e3514610064578063ac9a0c0014610079575b600080fd5b34801561004557600080fd5b5061004e61009b565b60405161005b9190610823565b60405180910390f35b34801561007057600080fd5b5061004e6100bf565b61008c610087366004610777565b6100e3565b60405161005b939291906108a0565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006100f0610624565b6040518061012001604052808e60ff1681526020018d6001600160a01b031681526020018c81526020018b81526020018a8152602001896001600160a01b03168152602001886001600160a01b031681526020018781526020018681525090506101598161016f565b9350935093505099509950999650505050505050565b60008060006060610190348660a001518760e001513089610100015161046f565b905060008560a001519050806001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000846001815181106101d857fe5b60200260200101516040518363ffffffff1660e01b81526004016101fd92919061080a565b602060405180830381600087803b15801561021757600080fd5b505af115801561022b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024f9190610734565b506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663117d8d0b89600001518a602001518b604001518860018151811061029e57fe5b60200260200101518d606001518e608001516040518763ffffffff1660e01b81526004016102d1969594939291906108b6565b6040805180830381600087803b1580156102ea57600080fd5b505af11580156102fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103229190610754565b60c08a015160405163a9059cbb60e01b8152929450909250906001600160a01b0382169063a9059cbb9061035c903390879060040161080a565b602060405180830381600087803b15801561037657600080fd5b505af115801561038a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ae9190610734565b50836001600160a01b031663a9059cbb3384886001815181106103cd57fe5b6020026020010151036040518363ffffffff1660e01b81526004016103f392919061080a565b602060405180830381600087803b15801561040d57600080fd5b505af1158015610421573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104459190610734565b508460018151811061045357fe5b6020026020010151838397509750975050505050509193909250565b6040805160028082526060808301845292839291906020830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156104ec57600080fd5b505afa158015610500573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105249190610670565b8160008151811061053157fe5b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061055f57fe5b6001600160a01b039283166020918202929092010152604051637ff36ab560e01b81527f000000000000000000000000000000000000000000000000000000000000000090911690637ff36ab59089906105c390899086908a908a90600401610837565b6000604051808303818588803b1580156105dc57600080fd5b505af11580156105f0573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526106199190810190610693565b979650505050505050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b600060208284031215610681578081fd5b815161068c81610910565b9392505050565b600060208083850312156106a5578182fd5b825167ffffffffffffffff808211156106bc578384fd5b818501915085601f8301126106cf578384fd5b8151818111156106db57fe5b83810291506106eb8483016108ec565b8181528481019084860184860187018a1015610705578788fd5b8795505b83861015610727578051835260019590950194918601918601610709565b5098975050505050505050565b600060208284031215610745578081fd5b8151801515811461068c578182fd5b60008060408385031215610766578081fd5b505080516020909101519092909150565b60008060008060008060008060006101208a8c031215610795578485fd5b893560ff811681146107a5578586fd5b985060208a01356107b581610910565b975060408a0135965060608a0135955060808a0135945060a08a01356107da81610910565b935060c08a01356107ea81610910565b8093505060e08a013591506101008a013590509295985092959850929598565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0391909116815260200190565b600060808201868352602060808185015281875180845260a0860191508289019350845b818110156108805784516001600160a01b03168352938301939183019160010161085b565b50506001600160a01b039690961660408501525050506060015292915050565b9283526020830191909152604082015260600190565b60ff9690961686526001600160a01b0394909416602086015260408501929092526060840152608083015260a082015260c00190565b60405181810167ffffffffffffffff8111828210171561090857fe5b604052919050565b6001600160a01b038116811461092557600080fd5b5056fea2646970667358221220194264039c1f1862d1aaba865e5228a9963285882c39053b2f903b934d7646b664736f6c63430007030033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c8063735de9f714610039578063ab696e3514610064578063ac9a0c0014610079575b600080fd5b34801561004557600080fd5b5061004e61009b565b60405161005b9190610823565b60405180910390f35b34801561007057600080fd5b5061004e6100bf565b61008c610087366004610777565b6100e3565b60405161005b939291906108a0565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006100f0610624565b6040518061012001604052808e60ff1681526020018d6001600160a01b031681526020018c81526020018b81526020018a8152602001896001600160a01b03168152602001886001600160a01b031681526020018781526020018681525090506101598161016f565b9350935093505099509950999650505050505050565b60008060006060610190348660a001518760e001513089610100015161046f565b905060008560a001519050806001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000846001815181106101d857fe5b60200260200101516040518363ffffffff1660e01b81526004016101fd92919061080a565b602060405180830381600087803b15801561021757600080fd5b505af115801561022b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024f9190610734565b506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663117d8d0b89600001518a602001518b604001518860018151811061029e57fe5b60200260200101518d606001518e608001516040518763ffffffff1660e01b81526004016102d1969594939291906108b6565b6040805180830381600087803b1580156102ea57600080fd5b505af11580156102fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103229190610754565b60c08a015160405163a9059cbb60e01b8152929450909250906001600160a01b0382169063a9059cbb9061035c903390879060040161080a565b602060405180830381600087803b15801561037657600080fd5b505af115801561038a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ae9190610734565b50836001600160a01b031663a9059cbb3384886001815181106103cd57fe5b6020026020010151036040518363ffffffff1660e01b81526004016103f392919061080a565b602060405180830381600087803b15801561040d57600080fd5b505af1158015610421573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104459190610734565b508460018151811061045357fe5b6020026020010151838397509750975050505050509193909250565b6040805160028082526060808301845292839291906020830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156104ec57600080fd5b505afa158015610500573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105249190610670565b8160008151811061053157fe5b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061055f57fe5b6001600160a01b039283166020918202929092010152604051637ff36ab560e01b81527f000000000000000000000000000000000000000000000000000000000000000090911690637ff36ab59089906105c390899086908a908a90600401610837565b6000604051808303818588803b1580156105dc57600080fd5b505af11580156105f0573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526106199190810190610693565b979650505050505050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b600060208284031215610681578081fd5b815161068c81610910565b9392505050565b600060208083850312156106a5578182fd5b825167ffffffffffffffff808211156106bc578384fd5b818501915085601f8301126106cf578384fd5b8151818111156106db57fe5b83810291506106eb8483016108ec565b8181528481019084860184860187018a1015610705578788fd5b8795505b83861015610727578051835260019590950194918601918601610709565b5098975050505050505050565b600060208284031215610745578081fd5b8151801515811461068c578182fd5b60008060408385031215610766578081fd5b505080516020909101519092909150565b60008060008060008060008060006101208a8c031215610795578485fd5b893560ff811681146107a5578586fd5b985060208a01356107b581610910565b975060408a0135965060608a0135955060808a0135945060a08a01356107da81610910565b935060c08a01356107ea81610910565b8093505060e08a013591506101008a013590509295985092959850929598565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0391909116815260200190565b600060808201868352602060808185015281875180845260a0860191508289019350845b818110156108805784516001600160a01b03168352938301939183019160010161085b565b50506001600160a01b039690961660408501525050506060015292915050565b9283526020830191909152604082015260600190565b60ff9690961686526001600160a01b0394909416602086015260408501929092526060840152608083015260a082015260c00190565b60405181810167ffffffffffffffff8111828210171561090857fe5b604052919050565b6001600160a01b038116811461092557600080fd5b5056fea2646970667358221220194264039c1f1862d1aaba865e5228a9963285882c39053b2f903b934d7646b664736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "yield token compounding without having to swap to basetokens from ETH manually",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}