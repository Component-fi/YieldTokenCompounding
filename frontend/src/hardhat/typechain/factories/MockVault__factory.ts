/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockVault, MockVaultInterface } from "../MockVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAuthorizer",
        name: "authorizer",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "liquidityProvider",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "int256[]",
        name: "deltas",
        type: "int256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "protocolFees",
        type: "uint256[]",
      },
    ],
    name: "PoolBalanceChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "tokenIn",
        type: "address",
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "tokenOut",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Swap",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "poolAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "currentBalances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "lastChangeBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolFeePercentage",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "userData",
        type: "bytes",
      },
    ],
    name: "callExitPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "poolAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "currentBalances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "lastChangeBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolFeePercentage",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "userData",
        type: "bytes",
      },
    ],
    name: "callJoinPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        components: [
          {
            internalType: "enum IVault.SwapKind",
            name: "kind",
            type: "uint8",
          },
          {
            internalType: "contract IERC20",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "contract IERC20",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "poolId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "lastChangeBlock",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
        ],
        internalType: "struct IPoolSwapStructs.SwapRequest",
        name: "request",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "balanceTokenIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "balanceTokenOut",
        type: "uint256",
      },
    ],
    name: "callMinimalPoolSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAuthorizer",
    outputs: [
      {
        internalType: "contract IAuthorizer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
    ],
    name: "getPoolTokens",
    outputs: [
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IVault.PoolSpecialization",
        name: "",
        type: "uint8",
      },
    ],
    name: "registerPool",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    name: "registerTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161109538038061109583398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b611004806100916000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c806309b2760f146100725780631cf8afb81461009b57806366a9c7d2146100b0578063aaabadc5146100c3578063f76102db146100d8578063f94d4668146100eb578063fc6156c51461010c575b600080fd5b610085610080366004610c98565b61011f565b6040516100929190610e45565b60405180910390f35b6100ae6100a9366004610952565b610125565b005b6100ae6100be366004610bce565b610351565b6100cb6103c6565b6040516100929190610eac565b6100ae6100e6366004610a4e565b6103d5565b6100fe6100f9366004610bb6565b6104bb565b604051610092929190610e17565b6100ae61011a366004610952565b61061d565b50600090565b606080886001600160a01b031663d5c096c489338a8a8a8a8a6040518863ffffffff1660e01b81526004016101609796959493929190610e4e565b600060405180830381600087803b15801561017a57600080fd5b505af115801561018e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101b69190810190610b56565b60008a81526001602052604081209294509092505b8154811015610230578381815181106101e057fe5b60200260200101518260010160008460000184815481106101fd57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020805490910190556001016101cb565b50606087516001600160401b038111801561024a57600080fd5b50604051908082528060200260200182016040528015610274578160200160208202803683370190505b509050606084516001600160401b038111801561029057600080fd5b506040519080825280602002602001820160405280156102ba578160200160208202803683370190505b50905060005b85518110156102fc578581815181106102d557fe5b60200260200101518282815181106102e957fe5b60209081029190910101526001016102c0565b50336001600160a01b03168b7fe5ce249087ce04f05a957192435400fd97868dba0e6a4b4c049abf8af80dae7884848860405161033b93929190610dae565b60405180910390a3505050505050505050505050565b6000838152600160205260408120905b83518110156103bf578160000184828151811061037a57fe5b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b039093169290921790915501610361565b5050505050565b6000546001600160a01b031690565b60405163274b044360e21b81526000906001600160a01b03861690639d2c110c9061040890879087908790600401610ec0565b602060405180830381600087803b15801561042257600080fd5b505af1158015610436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045a9190610cbe565b905083604001516001600160a01b031684602001516001600160a01b031685608001517faf6c437771b0b661385e6b30c82a76e9067d1c318485cf0f0c47aeb35a9a1de3846040516104ac9190610e45565b60405180910390a45050505050565b6000818152600160205260409020805460609182916001600160401b03811180156104e557600080fd5b5060405190808252806020026020018201604052801561050f578160200160208202803683370190505b5081549093506001600160401b038111801561052a57600080fd5b50604051908082528060200260200182016040528015610554578160200160208202803683370190505b50915060005b81548110156106165781600001818154811061057257fe5b9060005260206000200160009054906101000a90046001600160a01b031684828151811061059c57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508160010160008583815181106105ce57fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205483828151811061060357fe5b602090810291909101015260010161055a565b5050915091565b606080886001600160a01b03166374f3b00989338a8a8a8a8a6040518863ffffffff1660e01b81526004016106589796959493929190610e4e565b600060405180830381600087803b15801561067257600080fd5b505af1158015610686573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106ae9190810190610b56565b60008a81526001602052604081209294509092505b8154811015610729578381815181106106d857fe5b60200260200101518260010160008460000184815481106106f557fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902080549190910390556001016106c3565b50606087516001600160401b038111801561074357600080fd5b5060405190808252806020026020018201604052801561076d578160200160208202803683370190505b509050606084516001600160401b038111801561078957600080fd5b506040519080825280602002602001820160405280156107b3578160200160208202803683370190505b50905060005b85518110156102fc578581815181106107ce57fe5b60200260200101516000038282815181106107e557fe5b60209081029190910101526001016107b9565b803561080381610fb6565b919050565b600082601f830112610818578081fd5b813561082b61082682610f99565b610f76565b81815291506020808301908481018184028601820187101561084c57600080fd5b60005b8481101561087457813561086281610fb6565b8452928201929082019060010161084f565b505050505092915050565b600082601f83011261088f578081fd5b815161089d61082682610f99565b8181529150602080830190848101818402860182018710156108be57600080fd5b60005b84811015610874578151845292820192908201906001016108c1565b600082601f8301126108ed578081fd5b81356001600160401b0381111561090057fe5b610913601f8201601f1916602001610f76565b915080825283602082850101111561092a57600080fd5b8060208401602084013760009082016020015292915050565b80356002811061080357600080fd5b600080600080600080600060e0888a03121561096c578283fd5b873561097781610fb6565b96506020888101359650604089013561098f81610fb6565b955060608901356001600160401b03808211156109aa578586fd5b818b0191508b601f8301126109bd578586fd5b81356109cb61082682610f99565b8082825285820191508585018f8788860288010111156109e957898afd5b8995505b83861015610a0b5780358352600195909501949186019186016109ed565b509850505060808b0135955060a08b0135945060c08b0135925080831115610a31578384fd5b5050610a3f8a828b016108dd565b91505092959891949750929550565b60008060008060808587031215610a63578384fd5b8435610a6e81610fb6565b935060208501356001600160401b0380821115610a89578485fd5b818701915061012080838a031215610a9f578586fd5b610aa881610f76565b9050610ab383610943565b8152610ac1602084016107f8565b6020820152610ad2604084016107f8565b6040820152606083013560608201526080830135608082015260a083013560a0820152610b0160c084016107f8565b60c0820152610b1260e084016107f8565b60e08201526101008084013583811115610b2a578788fd5b610b368b8287016108dd565b918301919091525095989597505050506040840135936060013592915050565b60008060408385031215610b68578182fd5b82516001600160401b0380821115610b7e578384fd5b610b8a8683870161087f565b93506020850151915080821115610b9f578283fd5b50610bac8582860161087f565b9150509250929050565b600060208284031215610bc7578081fd5b5035919050565b600080600060608486031215610be2578283fd5b833592506020808501356001600160401b0380821115610c00578485fd5b818701915087601f830112610c13578485fd5b8135610c2161082682610f99565b81815284810190848601868402860187018c1015610c3d578889fd5b8895505b83861015610c68578035610c5481610fb6565b835260019590950194918601918601610c41565b50965050506040870135925080831115610c80578384fd5b5050610c8e86828701610808565b9150509250925092565b600060208284031215610ca9578081fd5b813560038110610cb7578182fd5b9392505050565b600060208284031215610ccf578081fd5b5051919050565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015610d1b5781516001600160a01b031687529582019590820190600101610cf6565b509495945050505050565b6000815180845260208085019450808401835b83811015610d1b57815187529582019590820190600101610d39565b60008151808452815b81811015610d7a57602081850181015186830182015201610d5e565b81811115610d8b5782602083870101525b50601f01601f19169290920160200192915050565b60028110610daa57fe5b9052565b600060608252610dc16060830186610ce3565b828103602084810191909152855180835286820192820190845b81811015610df757845183529383019391830191600101610ddb565b50508481036040860152610e0b8187610d26565b98975050505050505050565b600060408252610e2a6040830185610ce3565b8281036020840152610e3c8185610d26565b95945050505050565b90815260200190565b8781526001600160a01b0387811660208301528616604082015260e060608201819052600090610e8090830187610d26565b8560808401528460a084015282810360c0840152610e9e8185610d55565b9a9950505050505050505050565b6001600160a01b0391909116815260200190565b600060608252610ed4606083018651610da0565b6020850151610ee66080840182610cd6565b506040850151610ef960a0840182610cd6565b50606085015160c0830152608085015160e083015260a0850151610100818185015260c08701519150610120610f3181860184610cd6565b60e08801519250610f46610140860184610cd6565b818801519250806101608601525050610f63610180840182610d55565b6020840195909552505060400152919050565b6040518181016001600160401b0381118282101715610f9157fe5b604052919050565b60006001600160401b03821115610fac57fe5b5060209081020190565b6001600160a01b0381168114610fcb57600080fd5b5056fea2646970667358221220411eac34dee62c1081ed3cd3f0917e3aa4437ceae73960fe8e9c6ec59d88cbe964736f6c63430007030033";

export class MockVault__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    authorizer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockVault> {
    return super.deploy(authorizer, overrides || {}) as Promise<MockVault>;
  }
  getDeployTransaction(
    authorizer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(authorizer, overrides || {});
  }
  attach(address: string): MockVault {
    return super.attach(address) as MockVault;
  }
  connect(signer: Signer): MockVault__factory {
    return super.connect(signer) as MockVault__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVaultInterface {
    return new utils.Interface(_abi) as MockVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockVault {
    return new Contract(address, _abi, signerOrProvider) as MockVault;
  }
}
