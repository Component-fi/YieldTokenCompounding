/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockAssetTransfersHandler,
  MockAssetTransfersHandlerInterface,
} from "../MockAssetTransfersHandler";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWETH",
        name: "weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositToInternalBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "getInternalBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAsset",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "bool",
        name: "fromInternalBalance",
        type: "bool",
      },
    ],
    name: "receiveAsset",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAsset",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "bool",
        name: "toInternalBalance",
        type: "bool",
      },
    ],
    name: "sendAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161088b38038061088b83398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c6107fc61008f6000398061010152506107fc6000f3fe6080604052600436106100435760003560e01c80631f51af7d146100765780638a65d2e01461009657806390c185ae146100cc578063e65f9702146100ec57610071565b366100715761006f6100536100ff565b6001600160a01b0316336001600160a01b031614610206610123565b005b600080fd5b34801561008257600080fd5b5061006f6100913660046106ba565b610135565b3480156100a257600080fd5b506100b66100b1366004610626565b610147565b6040516100c39190610797565b60405180910390f35b3480156100d857600080fd5b5061006f6100e736600461065e565b610170565b61006f6100fa36600461070c565b610195565b7f000000000000000000000000000000000000000000000000000000000000000090565b8161013157610131816101a1565b5050565b610141848484846101f4565b50505050565b6001600160a01b0391821660009081526020818152604080832093909416825291909152205490565b6101856001600160a01b0383168430846102d5565b61019083838361032d565b505050565b6101418484848461035d565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b826101fe57610141565b61020784610434565b15610297576102198115610202610123565b6102216100ff565b6001600160a01b0316632e1a7d4d846040518263ffffffff1660e01b815260040161024c9190610797565b600060405180830381600087803b15801561026657600080fd5b505af115801561027a573d6000803e3d6000fd5b50610292925050506001600160a01b03831684610441565b610141565b60006102a2856104bb565b905081156102ba576102b583828661032d565b6102ce565b6102ce6001600160a01b03821684866104be565b5050505050565b610141846323b872dd60e01b8585856040516024016102f69392919061075a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526104dd565b6001600160a01b039283166000908152602081815260408083209490951682529290925291902080549091019055565b8261036757610141565b61037084610434565b156103f1576103828115610202610123565b61039183471015610204610123565b6103996100ff565b6001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103d357600080fd5b505af11580156103e7573d6000803e3d6000fd5b5050505050610141565b60006103fc856104bb565b90508115610419576000610413848387600161057d565b90940393505b83156102ce576102ce6001600160a01b0382168430876102d5565b6001600160a01b03161590565b610450814710156101a3610123565b6000826001600160a01b031682604051610469906104bb565b60006040518083038185875af1925050503d80600081146104a6576040519150601f19603f3d011682016040523d82523d6000602084013e6104ab565b606091505b50509050610190816101a4610123565b90565b6101908363a9059cbb60e01b84846040516024016102f692919061077e565b60006060836001600160a01b0316836040516104f99190610721565b6000604051808303816000865af19150503d8060008114610536576040519150601f19603f3d011682016040523d82523d6000602084013e61053b565b606091505b50915091506000821415610553573d6000803e3d6000fd5b610141815160001480610575575081806020019051810190610575919061069e565b6101a2610123565b6001600160a01b03808516600090815260208181526040808320938716835292905290812054826105ae57836105b8565b6105b881856105f8565b91506105c48183610610565b6001600160a01b03968716600090815260208181526040808320989099168252969096529590942094909455509192915050565b60008183106106075781610609565b825b9392505050565b6000610620838311156001610123565b50900390565b60008060408385031215610638578182fd5b8235610643816107a0565b91506020830135610653816107a0565b809150509250929050565b600080600060608486031215610672578081fd5b833561067d816107a0565b9250602084013561068d816107a0565b929592945050506040919091013590565b6000602082840312156106af578081fd5b8151610609816107b8565b600080600080608085870312156106cf578081fd5b84356106da816107a0565b93506020850135925060408501356106f1816107a0565b91506060850135610701816107b8565b939692955090935050565b600080600080608085870312156106cf578384fd5b60008251815b818110156107415760208186018101518583015201610727565b8181111561074f5782828501525b509190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b90815260200190565b6001600160a01b03811681146107b557600080fd5b50565b80151581146107b557600080fdfea2646970667358221220a87118f319a8006ec56353c72e95299673b5358b9187c32092475a48bed6899464736f6c63430007030033";

export class MockAssetTransfersHandler__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockAssetTransfersHandler> {
    return super.deploy(
      weth,
      overrides || {}
    ) as Promise<MockAssetTransfersHandler>;
  }
  getDeployTransaction(
    weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(weth, overrides || {});
  }
  attach(address: string): MockAssetTransfersHandler {
    return super.attach(address) as MockAssetTransfersHandler;
  }
  connect(signer: Signer): MockAssetTransfersHandler__factory {
    return super.connect(signer) as MockAssetTransfersHandler__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAssetTransfersHandlerInterface {
    return new utils.Interface(_abi) as MockAssetTransfersHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAssetTransfersHandler {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockAssetTransfersHandler;
  }
}
