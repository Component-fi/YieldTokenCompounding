/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ReentrancyAttack,
  ReentrancyAttackInterface,
} from "../ReentrancyAttack";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "data",
        type: "bytes4",
      },
    ],
    name: "callSender",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101a0806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630a2df1ed14610030575b600080fd5b6100576004803603602081101561004657600080fd5b50356001600160e01b031916610059565b005b60408051600481526024810182526020810180516001600160e01b03166001600160e01b0319851617815291518151600093339392918291908083835b602083106100b55780518252601f199092019160209182019101610096565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610117576040519150601f19603f3d011682016040523d82523d6000602084013e61011c565b606091505b5050905080610166576040805162461bcd60e51b81526020600482015260116024820152705245454e5452414e43595f41545441434b60781b604482015290519081900360640190fd5b505056fea2646970667358221220bcea29dbcab1057e11c9de5b2feb433b49a5c99c78a620dc7b9012f360a6460764736f6c63430007010033";

export class ReentrancyAttack__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ReentrancyAttack> {
    return super.deploy(overrides || {}) as Promise<ReentrancyAttack>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ReentrancyAttack {
    return super.attach(address) as ReentrancyAttack;
  }
  connect(signer: Signer): ReentrancyAttack__factory {
    return super.connect(signer) as ReentrancyAttack__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReentrancyAttackInterface {
    return new utils.Interface(_abi) as ReentrancyAttackInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReentrancyAttack {
    return new Contract(address, _abi, signerOrProvider) as ReentrancyAttack;
  }
}
