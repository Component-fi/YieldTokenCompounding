/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PoolPriceOracleMock,
  PoolPriceOracleMockInterface,
} from "../PoolPriceOracleMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "newSample",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sampleIndex",
        type: "uint256",
      },
    ],
    name: "PriceDataProcessed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "sample",
        type: "bytes32",
      },
    ],
    name: "decode",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct PoolPriceOracleMock.Sample",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct PoolPriceOracleMock.Sample",
        name: "sample",
        type: "tuple",
      },
    ],
    name: "encode",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "dates",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "findNearestSamplesTimestamp",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "prev",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "next",
            type: "uint256",
          },
        ],
        internalType: "struct PoolPriceOracleMock.BinarySearchResult[]",
        name: "results",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPriceOracle.Variable",
        name: "variable",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "currentIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "getPastAccumulator",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getSample",
    outputs: [
      {
        internalType: "int256",
        name: "logPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "accLogPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "accLogBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logInvariant",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "accLogInvariant",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalSamples",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct PoolPriceOracleMock.Sample",
        name: "sample",
        type: "tuple",
      },
    ],
    name: "mockSample",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "indexes",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct PoolPriceOracleMock.Sample[]",
        name: "samples",
        type: "tuple[]",
      },
    ],
    name: "mockSamples",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "elapsed",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentIndex",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "logPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logInvariant",
        type: "int256",
      },
    ],
    name: "processPriceData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "sample",
        type: "bytes32",
      },
      {
        internalType: "int256",
        name: "logPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logInvariant",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "update",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct PoolPriceOracleMock.Sample",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e6d806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063c3748ef111610066578063c3748ef114610122578063d437680414610142578063d5125db614610162578063e5fe5f3c14610175578063ff7b6f1e146101885761009e565b8063259efd16146100a3578063264959fb146100b85780633d48f8c1146100e157806360d1507c146100f4578063b48b5b401461011a575b600080fd5b6100b66100b1366004610cdd565b61019b565b005b6100cb6100c6366004610c8b565b6101ba565b6040516100d89190610d69565b60405180910390f35b6100cb6100ef366004610cc2565b6101d3565b610107610102366004610c39565b610206565b6040516100d89796959493929190610d72565b6100cb61024f565b610135610130366004610c39565b610255565b6040516100d89190610da2565b610155610150366004610bf6565b6102da565b6040516100d89190610d0a565b6100b6610170366004610c51565b6103ae565b6100b6610183366004610b31565b610408565b610135610196366004610c51565b610451565b6101a4816101d3565b6000928352602083905260409092209190915550565b60006101c98484844203610473565b90505b9392505050565b6000610200826000015183602001518460400151856060015186608001518760a001518860c001516105b9565b92915050565b6000806000806000806000610221610400891061013b610619565b600061022c8961062b565b90506102378161063d565b959f949e50929c50909a509850965090945092505050565b61040090565b61025d610a09565b6040805160e08101909152806102748460006106a0565b81526020016102848460006106eb565b81526020016102948460016106a0565b81526020016102a48460016106eb565b81526020016102b48460026106a0565b81526020016102c48460026106eb565b81526020016102d28461072f565b905292915050565b6060825167ffffffffffffffff811180156102f457600080fd5b5060405190808252806020026020018201604052801561032e57816020015b61031b610a46565b8152602001906001900390816103135790505b50905060005b83518110156103a75760008061035d86848151811061034f57fe5b60200260200101518661073b565b9150915060405180604001604052806103758461072f565b81526020016103838361072f565b81525084848151811061039257fe5b60209081029190910101525050600101610334565b5092915050565b4285900360006103c182878787876107ee565b90507fa7f3e984c65d79d0fa58244dddb6522f661c9dea23fe4940801cbfe08810750686821415826040516103f7929190610d59565b60405180910390a150505050505050565b60005b825181101561044c5761044483828151811061042357fe5b602002602001015183838151811061043757fe5b602002602001015161019b565b60010161040b565b505050565b610459610a09565b6104696101308787878787610845565b9695505050505050565b600061048482421015610138610619565b4282900360006104938561062b565b905060006104a08261072f565b90506104b160008211610139610619565b8281116104dd57808303806104c6848a6106a0565b026104d1848a6106eb565b019450505050506101cc565b60006104e8876108a5565b905060006104f58261062b565b905060006105028261072f565b905061051360008211610139610619565b6105228682111561013a610619565b5050600080610531868461073b565b9150915060006105408361072f565b6105498361072f565b03905080156105a157600061055e848d6106eb565b610568848e6106eb565b03905060006105768561072f565b89039050828183028161058557fe5b05610590868f6106eb565b0199505050505050505050506101cc565b6105ab838c6106eb565b9750505050505050506101cc565b60006105c582826108b2565b6105d084601f6108b6565b6105db8660546108c7565b6105e688606a6108b6565b6105f18a609f6108c7565b6105fc8c60b56108b6565b6106078e60ea6108c7565b17171717171798975050505050505050565b8161062757610627816108d4565b5050565b60009081526020819052604090205490565b600080600080600080600061065188610927565b965061065c88610934565b955061066788610941565b94506106728861094e565b935061067d8861095b565b925061068888610968565b91506106938861072f565b9050919395979092949650565b6000808260028111156106af57fe5b14156106c5576106be83610927565b9050610200565b60018260028111156106d357fe5b14156106e2576106be83610941565b6106be8361095b565b6000808260028111156106fa57fe5b1415610709576106be83610934565b600182600281111561071757fe5b1415610726576106be8361094e565b6106be83610968565b60006102008282610975565b600080806103ff8180805b8385116107b25760028585010461075d818a61097f565b93506107688461062b565b92506107738361072f565b915089821015610788578060010195506107ac565b8982111561079b576001810394506107ac565b8283975097505050505050506107e7565b50610746565b8881106107d0576107ca6107c584610990565b61062b565b826107dd565b816107dd6107c5856108a5565b9650965050505050505b9250929050565b60008061080a858585426108018b61062b565b93929190610845565b905060784288900310158061081f5786610828565b610828876108a5565b600081815260208190526040902092909255509695505050505050565b6000806108518761072f565b83039050600081870261086389610934565b01905060008287026108748a61094e565b01905060008387026108858b610968565b01905061089789848a858b868c6105b9565b9a9950505050505050505050565b600061020082600161097f565b1b90565b661fffffffffffff91909116901b90565b623fffff91909116901b90565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60006102008260ea61099d565b60006102008260b56109c7565b600061020082609f61099d565b600061020082606a6109c7565b600061020082605461099d565b600061020082601f6109c7565b1c637fffffff1690565b60006104008383015b069392505050565b60006102008260016109fa565b600082821c623fffff16621fffff81136109b757806109bf565b623fffff1981175b949350505050565b600082821c661fffffffffffff16660fffffffffffff81136109e957806109bf565b661fffffffffffff19179392505050565b60006104008284038101610988565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b600082601f830112610a70578081fd5b8135610a83610a7e82610e17565b610df0565b818152915060208083019084810181840286018201871015610aa457600080fd5b60005b84811015610ac357813584529282019290820190600101610aa7565b505050505092915050565b600060e08284031215610adf578081fd5b610ae960e0610df0565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015292915050565b60008060408385031215610b43578182fd5b823567ffffffffffffffff80821115610b5a578384fd5b610b6686838701610a60565b9350602091508185013581811115610b7c578384fd5b85019050601f81018613610b8e578283fd5b8035610b9c610a7e82610e17565b8181528381019083850160e0808502860187018b1015610bba578788fd5b8795505b84861015610be657610bd08b83610ace565b8452600195909501949286019290810190610bbe565b5096999098509650505050505050565b60008060408385031215610c08578182fd5b823567ffffffffffffffff811115610c1e578283fd5b610c2a85828601610a60565b95602094909401359450505050565b600060208284031215610c4a578081fd5b5035919050565b600080600080600060a08688031215610c68578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b600080600060608486031215610c9f578283fd5b833560038110610cad578384fd5b95602085013595506040909401359392505050565b600060e08284031215610cd3578081fd5b6101cc8383610ace565b6000806101008385031215610cf0578182fd5b82359150610d018460208501610ace565b90509250929050565b602080825282518282018190526000919060409081850190868401855b82811015610d4c57815180518552860151868501529284019290850190600101610d27565b5091979650505050505050565b9115158252602082015260400190565b90815260200190565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b60405181810167ffffffffffffffff81118282101715610e0f57600080fd5b604052919050565b600067ffffffffffffffff821115610e2d578081fd5b506020908102019056fea26469706673582212202371f7ed58c9594c8bbb301b2fd60e074265a78fcfacce023e870808a96c10d264736f6c63430007010033";

export class PoolPriceOracleMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PoolPriceOracleMock> {
    return super.deploy(overrides || {}) as Promise<PoolPriceOracleMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PoolPriceOracleMock {
    return super.attach(address) as PoolPriceOracleMock;
  }
  connect(signer: Signer): PoolPriceOracleMock__factory {
    return super.connect(signer) as PoolPriceOracleMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PoolPriceOracleMockInterface {
    return new utils.Interface(_abi) as PoolPriceOracleMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PoolPriceOracleMock {
    return new Contract(address, _abi, signerOrProvider) as PoolPriceOracleMock;
  }
}
