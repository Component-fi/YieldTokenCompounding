/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  YieldTokenCompounding,
  YieldTokenCompoundingInterface,
} from "../YieldTokenCompounding";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_balVault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_trancheAddress",
        type: "address",
      },
    ],
    name: "approveTranchePTOnBalancer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "balVault",
    outputs: [
      {
        internalType: "contract IVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_n",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "_trancheAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_balancerPoolId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_expectedYtOutput",
        type: "uint256",
      },
    ],
    name: "compound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_trancheAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_poolId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_baseTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_fromAddress",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "_receiverAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "swapPTsForBaseTokenOnBalancer",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405260001960a05234801561001657600080fd5b50604051610d0f380380610d0f8339810160408190526100359161004a565b60601b6001600160601b031916608052610078565b60006020828403121561005b578081fd5b81516001600160a01b0381168114610071578182fd5b9392505050565b60805160601c60a051610c626100ad600039806101755280610687525080610199528061023d52806106655250610c626000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806376f3bc071461005157806377aba2131461007a578063bdc387b81461008f578063bfe75b86146100b0575b600080fd5b61006461005f3660046108f8565b6100c5565b6040516100719190610bf3565b60405180910390f35b61008261023b565b6040516100719190610a68565b6100a261009d3660046109de565b61025f565b604051610071929190610bfc565b6100c36100be3660046108d5565b61063f565b005b60008087866100d2610865565b6040518060c001604052808b81526020018560018111156100ef57fe5b8152602001846001600160a01b03168152602001836001600160a01b031681526020018781526020016040518060200160405280600081525081525090506101356108ae565b50604080516080810182526001600160a01b03808b1682526000602083018190528a8216838501526060830181905292516352bbbe2960e01b81529192917f00000000000000000000000000000000000000000000000000000000000000009183917f0000000000000000000000000000000000000000000000000000000000000000909116906352bbbe29906101d6908890889086908890600401610b2b565b602060405180830381600087803b1580156101f057600080fd5b505af1158015610204573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022891906109a3565b9f9e505050505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008760ff161180156102785750601f8760ff16105b61029d5760405162461bcd60e51b815260040161029490610ab9565b60405180910390fd5b60008690506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156102dd57600080fd5b505afa1580156102f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103159190610987565b90506000816001600160a01b03166370a08231336040518263ffffffff1660e01b81526004016103459190610a68565b60206040518083038186803b15801561035d57600080fd5b505afa158015610371573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039591906109a3565b90506000836001600160a01b03166309218e916040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d257600080fd5b505afa1580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a9190610987565b9050836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561044557600080fd5b505afa158015610459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047d9190610987565b6001600160a01b03166323b872dd33838b6040518463ffffffff1660e01b81526004016104ac93929190610a7c565b602060405180830381600087803b1580156104c657600080fd5b505af11580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe9190610967565b50600061050e8c868c8786610706565b9050878110156105305760405162461bcd60e51b815260040161029490610b00565b846001600160a01b031663764b666c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561056957600080fd5b505afa15801561057d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a19190610987565b6001600160a01b031663a9059cbb33836040518363ffffffff1660e01b81526004016105ce929190610aa0565b602060405180830381600087803b1580156105e857600080fd5b505af11580156105fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106209190610967565b508061062c85856107dd565b9650965050505050509550959350505050565b60405163095ea7b360e01b815281906001600160a01b0382169063095ea7b3906106af907f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090600401610aa0565b602060405180830381600087803b1580156106c957600080fd5b505af11580156106dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107019190610967565b505050565b600080805b8760ff168160ff1610156107d257600080886001600160a01b03166385f45c88306040518263ffffffff1660e01b81526004016107489190610a68565b6040805180830381600087803b15801561076157600080fd5b505af1158015610775573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079991906109bb565b9150915080840193506107c78989893060018f0360ff168860ff16146107bf578a6107c1565b335b876100c5565b50505060010161070b565b509695505050505050565b6040516370a0823160e01b81526000906001600160a01b038416906370a082319061080c903390600401610a68565b60206040518083038186803b15801561082457600080fd5b505afa158015610838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085c91906109a3565b90910392915050565b6040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6000602082840312156108e6578081fd5b81356108f181610c17565b9392505050565b60008060008060008060c08789031215610910578182fd5b863561091b81610c17565b955060208701359450604087013561093281610c17565b9350606087013561094281610c17565b9250608087013561095281610c17565b8092505060a087013590509295509295509295565b600060208284031215610978578081fd5b815180151581146108f1578182fd5b600060208284031215610998578081fd5b81516108f181610c17565b6000602082840312156109b4578081fd5b5051919050565b600080604083850312156109cd578182fd5b505080516020909101519092909150565b600080600080600060a086880312156109f5578081fd5b853560ff81168114610a05578182fd5b94506020860135610a1581610c17565b94979496505050506040830135926060810135926080909101359150565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60208082526027908201527f6e2068617320746f206265206265747765656e203120746f2032353520696e63604082015266363ab9b4bb329760c91b606082015260800190565b602080825260119082015270546f6f206d75636820736c69707061676560781b604082015260600190565b600060e08252855160e0830152602080870151610b4781610c0a565b61010084015260408701516001600160a01b03908116610120850152606088015116610140840152608087015161016084015260a087015160c061018085015280516101a08501819052835b81811015610bb0578281018401518682016101c001528301610b93565b81811115610bc257846101c083880101525b50601f01601f191684016101c0019250610be0905081840187610a33565b5060a082019390935260c0015292915050565b90815260200190565b918252602082015260400190565b60028110610c1457fe5b50565b6001600160a01b0381168114610c1457600080fdfea26469706673582212205e2d0c6978a53c701f1ecce910b789a382959f77085206d45c4d8ba23247c35464736f6c63430007010033";

export class YieldTokenCompounding__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _balVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<YieldTokenCompounding> {
    return super.deploy(
      _balVault,
      overrides || {}
    ) as Promise<YieldTokenCompounding>;
  }
  getDeployTransaction(
    _balVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_balVault, overrides || {});
  }
  attach(address: string): YieldTokenCompounding {
    return super.attach(address) as YieldTokenCompounding;
  }
  connect(signer: Signer): YieldTokenCompounding__factory {
    return super.connect(signer) as YieldTokenCompounding__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): YieldTokenCompoundingInterface {
    return new utils.Interface(_abi) as YieldTokenCompoundingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): YieldTokenCompounding {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as YieldTokenCompounding;
  }
}
