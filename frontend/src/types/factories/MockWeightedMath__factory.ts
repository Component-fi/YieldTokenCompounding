/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockWeightedMath,
  MockWeightedMathInterface,
} from "../MockWeightedMath";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "normalizedWeights",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amountsOut",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "bptInForExactTokensOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "normalizedWeight",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "previousInvariant",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentInvariant",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolSwapFeePercentage",
        type: "uint256",
      },
    ],
    name: "calculateDueTokenProtocolSwapFeeAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenNormalizedWeight",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "exactBPTInForTokenOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "currentBalances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "bptAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalBPT",
        type: "uint256",
      },
    ],
    name: "exactBPTInForTokensOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "normalizedWeights",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amountsIn",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "exactTokensInForBPTOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenBalanceIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenWeightIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenBalanceOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenWeightOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenAmountOut",
        type: "uint256",
      },
    ],
    name: "inGivenOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "normalizedWeights",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
    ],
    name: "invariant",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenBalanceIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenWeightIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenBalanceOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenWeightOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenAmountIn",
        type: "uint256",
      },
    ],
    name: "outGivenIn",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenNormalizedWeight",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptAmountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "tokenInForExactBPTOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611c21806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063567853711161006657806356785371146103b45780635b55b24a146104d757806398f59bca1461050c578063c2546cc3146106b6578063fab3b9d7146106eb57610093565b80631b02e9a8146100985780631c855fa6146100df5780632e752149146101d55780634b114ddf1461037f575b600080fd5b6100cd600480360360a08110156100ae57600080fd5b5080359060208101359060408101359060608101359060800135610720565b60408051918252519081900360200190f35b610185600480360360608110156100f557600080fd5b810190602081018135600160201b81111561010f57600080fd5b82018360208201111561012157600080fd5b803590602001918460208302840111600160201b8311171561014257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550508235935050506020013561073b565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101c15781810151838201526020016101a9565b505050509050019250505060405180910390f35b6100cd600480360360a08110156101eb57600080fd5b810190602081018135600160201b81111561020557600080fd5b82018360208201111561021757600080fd5b803590602001918460208302840111600160201b8311171561023857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561028757600080fd5b82018360208201111561029957600080fd5b803590602001918460208302840111600160201b831117156102ba57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561030957600080fd5b82018360208201111561031b57600080fd5b803590602001918460208302840111600160201b8311171561033c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135610750565b6100cd600480360360a081101561039557600080fd5b508035906020810135906040810135906060810135906080013561075f565b6100cd600480360360408110156103ca57600080fd5b810190602081018135600160201b8111156103e457600080fd5b8201836020820111156103f657600080fd5b803590602001918460208302840111600160201b8311171561041757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561046657600080fd5b82018360208201111561047857600080fd5b803590602001918460208302840111600160201b8311171561049957600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061076e945050505050565b6100cd600480360360a08110156104ed57600080fd5b5080359060208101359060408101359060608101359060800135610783565b6100cd600480360360a081101561052257600080fd5b810190602081018135600160201b81111561053c57600080fd5b82018360208201111561054e57600080fd5b803590602001918460208302840111600160201b8311171561056f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156105be57600080fd5b8201836020820111156105d057600080fd5b803590602001918460208302840111600160201b831117156105f157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561064057600080fd5b82018360208201111561065257600080fd5b803590602001918460208302840111600160201b8311171561067357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135610792565b6100cd600480360360a08110156106cc57600080fd5b50803590602081013590604081013590606081013590608001356107a1565b6100cd600480360360a081101561070157600080fd5b50803590602081013590604081013590606081013590608001356107b0565b600061072f86868686866107bf565b90505b95945050505050565b6060610748848484610843565b949350505050565b600061072f86868686866108f5565b600061072f8686868686610b5a565b600061077a8383610bc7565b90505b92915050565b600061072f8686868686610c32565b600061072f8686868686610cef565b600061072f8686868686610ed4565b600061072f8686868686610f76565b60006107e16107d685670429d069189e0000610fea565b831115610131611020565b60006107f76107f08685611032565b8690611048565b905060006108058588611048565b90506000610813838361109f565b9050600061082982670de0b6b3a7640000611032565b90506108358a826110d2565b9a9950505050505050505050565b60606000610851848461110e565b90506060855167ffffffffffffffff8111801561086d57600080fd5b50604051908082528060200260200182016040528015610897578160200160208202803683370190505b50905060005b86518110156108eb576108cc838883815181106108b657fe5b6020026020010151610fea90919063ffffffff16565b8282815181106108d857fe5b602090810291909101015260010161089d565b5095945050505050565b60006060845167ffffffffffffffff8111801561091157600080fd5b5060405190808252806020026020018201604052801561093b578160200160208202803683370190505b5090506000805b88518110156109f0576109a189828151811061095a57fe5b602002602001015161099b89848151811061097157fe5b60200260200101518c858151811061098557fe5b602002602001015161115690919063ffffffff16565b9061110e565b8382815181106109ad57fe5b6020026020010181815250506109e66109df8983815181106109cb57fe5b60200260200101518584815181106108b657fe5b8390611156565b9150600101610942565b50670de0b6b3a764000060005b8951811015610b1857600083858381518110610a1557fe5b60200260200101511115610a9a576000610a46610a3a86670de0b6b3a7640000611032565b8d85815181106108b657fe5b90506000610a70828c8681518110610a5a57fe5b602002602001015161103290919063ffffffff16565b9050610a916109df610a8a670de0b6b3a76400008c611032565b8390610fea565b92505050610ab1565b888281518110610aa657fe5b602002602001015190505b6000610ada8c8481518110610ac257fe5b602002602001015161099b848f878151811061098557fe5b9050610b0c610b058c8581518110610aee57fe5b60200260200101518361116890919063ffffffff16565b8590610fea565b935050506001016109fd565b50670de0b6b3a76400008110610b4e57610b44610b3d82670de0b6b3a7640000611032565b8790610fea565b9350505050610732565b60009350505050610732565b6000610b7c610b7187670429d069189e0000610fea565b831115610130611020565b6000610b888784611156565b90506000610b968883611048565b90506000610ba4888761110e565b90506000610bb2838361109f565b9050610835610bc0826111b0565b8990610fea565b670de0b6b3a764000060005b8351811015610c2257610c18610a8a858381518110610bee57fe5b6020026020010151858481518110610c0257fe5b602002602001015161116890919063ffffffff16565b9150600101610bd3565b5061077d60008211610137611020565b600080610c4984610c438188611032565b90611048565b9050610c626709b6e64a8ec60000821015610132611020565b6000610c80610c79670de0b6b3a76400008961110e565b839061109f565b90506000610c97610c90836111b0565b8a90610fea565b90506000610ca4896111b0565b90506000610cb283836110d2565b90506000610cc08483611032565b9050610cdf610cd8610cd18a6111b0565b8490610fea565b8290611156565b9c9b505050505050505050505050565b60006060845167ffffffffffffffff81118015610d0b57600080fd5b50604051908082528060200260200182016040528015610d35578160200160208202803683370190505b5090506000805b8851811015610ddd57610d7f898281518110610d5457fe5b6020026020010151610c43898481518110610d6b57fe5b60200260200101518c8581518110610a5a57fe5b838281518110610d8b57fe5b602002602001018181525050610dd36109df898381518110610da957fe5b6020026020010151858481518110610dbd57fe5b60200260200101516110d290919063ffffffff16565b9150600101610d3c565b50670de0b6b3a764000060005b8951811015610eb3576000848281518110610e0157fe5b6020026020010151841115610e53576000610e1e610a3a866111b0565b90506000610e32828c8681518110610a5a57fe5b9050610e4a6109df610e438b6111b0565b8390611048565b92505050610e6a565b888281518110610e5f57fe5b602002602001015190505b6000610e938c8481518110610e7b57fe5b602002602001015161099b848f8781518110610a5a57fe5b9050610ea7610b058c8581518110610aee57fe5b93505050600101610dea565b50610ec7610ec0826111b0565b87906110d2565b9998505050505050505050565b600080610ee584610c438188611156565b9050610efe6729a2241af62c0000821115610133611020565b6000610f15610c79670de0b6b3a764000089611048565b90506000610f35610f2e83670de0b6b3a7640000611032565b8a906110d2565b90506000610f42896111b0565b90506000610f5083836110d2565b90506000610f5e8483611032565b9050610cdf610cd8610f6f8a6111b0565b8490611048565b6000838311610f8757506000610732565b6000610f938585611048565b90506000610fa9670de0b6b3a76400008861110e565b9050610fbd826709b6e64a8ec600006111dc565b91506000610fcb838361109f565b90506000610fe2610fdb836111b0565b8b90610fea565b905061083581875b600082820261100e84158061100757508385838161100457fe5b04145b6003611020565b670de0b6b3a764000090049392505050565b8161102e5761102e816111f3565b5050565b6000611042838311156001611020565b50900390565b60006110578215156004611020565b826110645750600061077d565b670de0b6b3a7640000838102906110879085838161107e57fe5b04146005611020565b82600182038161109357fe5b0460010191505061077d565b6000806110ac8484611246565b905060006110c66110bf836127106110d2565b6001611156565b90506107328282611156565b60008282026110ec84158061100757508385838161100457fe5b806110fb57600091505061077d565b670de0b6b3a76400006000198201611093565b600061111d8215156004611020565b8261112a5750600061077d565b670de0b6b3a7640000838102906111449085838161107e57fe5b82818161114d57fe5b0491505061077d565b600082820161077a8482101583611020565b6000806111758484611246565b905060006111886110bf836127106110d2565b90508082101561119d5760009250505061077d565b6111a78282611032565b9250505061077d565b6000670de0b6b3a764000082106111c85760006111d4565b81670de0b6b3a7640000035b90505b919050565b6000818310156111ec578161077a565b5090919050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60008161125c5750670de0b6b3a764000061077d565b826112695750600061077d565b61127a600160ff1b84106006611020565b826112a0770bce5086492111aea88f4bb1ca6bcf584181ea8059f7653284106007611020565b826000670c7d713b49da0000831380156112c15750670f43fc2c04ee000083125b156112f85760006112d184611351565b9050670de0b6b3a764000080820784020583670de0b6b3a764000083050201915050611306565b816113028461146f565b0290505b670de0b6b3a7640000900561133e680238fd42c5cf03ffff198212801590611337575068070c1cc73b00c800008213155b6008611020565b6113478161180e565b9695505050505050565b670de0b6b3a7640000026000806a0c097ce7bc90715b34b9f160241b808401906ec097ce7bc90715b34b9f0fffffffff198501028161138c57fe5b05905060006a0c097ce7bc90715b34b9f160241b82800205905081806a0c097ce7bc90715b34b9f160241b81840205915060038205016a0c097ce7bc90715b34b9f160241b82840205915060058205016a0c097ce7bc90715b34b9f160241b82840205915060078205016a0c097ce7bc90715b34b9f160241b82840205915060098205016a0c097ce7bc90715b34b9f160241b828402059150600b8205016a0c097ce7bc90715b34b9f160241b828402059150600d8205016a0c097ce7bc90715b34b9f160241b828402059150600f826002919005919091010295945050505050565b6000670de0b6b3a76400008212156114ab576114a1826a0c097ce7bc90715b34b9f160241b8161149b57fe5b0561146f565b60000390506111d7565b60007e1600ef3172e58d2e933ec884fde10064c63b5372d805e203c000000000000083126114fc57770195e54c5dd42177f53a27172fa9ec630262827000000000830592506806f05b59d3b2000000015b73011798004d755d3c8bc8e03204cf44619e0000008312611534576b1425982cf597cd205cef7380830592506803782dace9d9000000015b606492830292026e01855144814a7ff805980ff0084000831261157c576e01855144814a7ff805980ff008400068056bc75e2d63100000840205925068ad78ebc5ac62000000015b6b02df0ab5a80a22c61ab5a70083126115b7576b02df0ab5a80a22c61ab5a70068056bc75e2d6310000084020592506856bc75e2d631000000015b693f1fce3da636ea5cf85083126115ee57693f1fce3da636ea5cf85068056bc75e2d631000008402059250682b5e3af16b18800000015b690127fa27722cc06cc5e2831261162557690127fa27722cc06cc5e268056bc75e2d6310000084020592506815af1d78b58c400000015b68280e60114edb805d03831261165a5768280e60114edb805d0368056bc75e2d631000008402059250680ad78ebc5ac6200000015b680ebc5fb41746121110831261168557680ebc5fb4174612111068056bc75e2d631000009384020592015b6808f00f760a4b2db55d83126116ba576808f00f760a4b2db55d68056bc75e2d6310000084020592506802b5e3af16b1880000015b6806f5f177578893793783126116ef576806f5f177578893793768056bc75e2d63100000840205925068015af1d78b58c40000015b6806248f33704b2866038312611723576806248f33704b28660368056bc75e2d63100000840205925067ad78ebc5ac620000015b6805c548670b9510e7ac8312611757576805c548670b9510e7ac68056bc75e2d6310000084020592506756bc75e2d6310000015b600068056bc75e2d63100000840168056bc75e2d63100000808603028161177a57fe5b059050600068056bc75e2d63100000828002059050818068056bc75e2d63100000818402059150600382050168056bc75e2d63100000828402059150600582050168056bc75e2d63100000828402059150600782050168056bc75e2d63100000828402059150600982050168056bc75e2d63100000828402059150600b820501600202606485820105979650505050505050565b600061183d680238fd42c5cf03ffff198312158015611836575068070c1cc73b00c800008313155b6009611020565b6000821215611870576118528260000361180e565b6a0c097ce7bc90715b34b9f160241b8161186857fe5b0590506111d7565b60006806f05b59d3b200000083126118b057506806f05b59d3b1ffffff1990910190770195e54c5dd42177f53a27172fa9ec6302628270000000006118e6565b6803782dace9d900000083126118e257506803782dace9d8ffffff19909101906b1425982cf597cd205cef73806118e6565b5060015b6064929092029168056bc75e2d6310000068ad78ebc5ac6200000084126119365768ad78ebc5ac61ffffff199093019268056bc75e2d631000006e01855144814a7ff805980ff008400082020590505b6856bc75e2d6310000008412611972576856bc75e2d630ffffff199093019268056bc75e2d631000006b02df0ab5a80a22c61ab5a70082020590505b682b5e3af16b1880000084126119ac57682b5e3af16b187fffff199093019268056bc75e2d63100000693f1fce3da636ea5cf85082020590505b6815af1d78b58c40000084126119e6576815af1d78b58c3fffff199093019268056bc75e2d63100000690127fa27722cc06cc5e282020590505b680ad78ebc5ac62000008412611a1f57680ad78ebc5ac61fffff199093019268056bc75e2d6310000068280e60114edb805d0382020590505b68056bc75e2d631000008412611a585768056bc75e2d630fffff199093019268056bc75e2d63100000680ebc5fb4174612111082020590505b6802b5e3af16b18800008412611a91576802b5e3af16b187ffff199093019268056bc75e2d631000006808f00f760a4b2db55d82020590505b68015af1d78b58c400008412611aca5768015af1d78b58c3ffff199093019268056bc75e2d631000006806f5f177578893793782020590505b68056bc75e2d631000008481019085906002908280020505918201919050600368056bc75e2d631000008783020505918201919050600468056bc75e2d631000008783020505918201919050600568056bc75e2d631000008783020505918201919050600668056bc75e2d631000008783020505918201919050600768056bc75e2d631000008783020505918201919050600868056bc75e2d631000008783020505918201919050600968056bc75e2d631000008783020505918201919050600a68056bc75e2d631000008783020505918201919050600b68056bc75e2d631000008783020505918201919050600c68056bc75e2d631000008783020505918201919050606468056bc75e2d6310000084840205850205969550505050505056fea2646970667358221220fdf32f14d5203da35a84c3297b82fcbcc07a5c94402b5b0136f6b2ef95bc6c9c64736f6c63430007010033";

export class MockWeightedMath__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockWeightedMath> {
    return super.deploy(overrides || {}) as Promise<MockWeightedMath>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockWeightedMath {
    return super.attach(address) as MockWeightedMath;
  }
  connect(signer: Signer): MockWeightedMath__factory {
    return super.connect(signer) as MockWeightedMath__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockWeightedMathInterface {
    return new utils.Interface(_abi) as MockWeightedMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockWeightedMath {
    return new Contract(address, _abi, signerOrProvider) as MockWeightedMath;
  }
}
