/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MockVaultInterface extends ethers.utils.Interface {
  functions: {
    "callExitPool(address,bytes32,address,uint256[],uint256,uint256,bytes)": FunctionFragment;
    "callJoinPool(address,bytes32,address,uint256[],uint256,uint256,bytes)": FunctionFragment;
    "callMinimalPoolSwap(address,tuple,uint256,uint256)": FunctionFragment;
    "getAuthorizer()": FunctionFragment;
    "getPoolTokens(bytes32)": FunctionFragment;
    "registerPool(uint8)": FunctionFragment;
    "registerTokens(bytes32,address[],address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "callExitPool",
    values: [
      string,
      BytesLike,
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "callJoinPool",
    values: [
      string,
      BytesLike,
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "callMinimalPoolSwap",
    values: [
      string,
      {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolTokens",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTokens",
    values: [BytesLike, string[], string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "callExitPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callJoinPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callMinimalPoolSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTokens",
    data: BytesLike
  ): Result;

  events: {
    "PoolBalanceChanged(bytes32,address,address[],int256[],uint256[])": EventFragment;
    "Swap(bytes32,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolBalanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export class MockVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockVaultInterface;

  functions: {
    callExitPool(
      poolAddress: string,
      poolId: BytesLike,
      recipient: string,
      currentBalances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callJoinPool(
      poolAddress: string,
      poolId: BytesLike,
      recipient: string,
      currentBalances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callMinimalPoolSwap(
      pool: string,
      request: {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      balanceTokenIn: BigNumberish,
      balanceTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAuthorizer(overrides?: CallOverrides): Promise<[string]>;

    getPoolTokens(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; balances: BigNumber[] }
    >;

    registerPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerTokens(
      poolId: BytesLike,
      tokens: string[],
      arg2: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  callExitPool(
    poolAddress: string,
    poolId: BytesLike,
    recipient: string,
    currentBalances: BigNumberish[],
    lastChangeBlock: BigNumberish,
    protocolFeePercentage: BigNumberish,
    userData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callJoinPool(
    poolAddress: string,
    poolId: BytesLike,
    recipient: string,
    currentBalances: BigNumberish[],
    lastChangeBlock: BigNumberish,
    protocolFeePercentage: BigNumberish,
    userData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callMinimalPoolSwap(
    pool: string,
    request: {
      kind: BigNumberish;
      tokenIn: string;
      tokenOut: string;
      amount: BigNumberish;
      poolId: BytesLike;
      lastChangeBlock: BigNumberish;
      from: string;
      to: string;
      userData: BytesLike;
    },
    balanceTokenIn: BigNumberish,
    balanceTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAuthorizer(overrides?: CallOverrides): Promise<string>;

  getPoolTokens(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; balances: BigNumber[] }
  >;

  registerPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  registerTokens(
    poolId: BytesLike,
    tokens: string[],
    arg2: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    callExitPool(
      poolAddress: string,
      poolId: BytesLike,
      recipient: string,
      currentBalances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    callJoinPool(
      poolAddress: string,
      poolId: BytesLike,
      recipient: string,
      currentBalances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    callMinimalPoolSwap(
      pool: string,
      request: {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      balanceTokenIn: BigNumberish,
      balanceTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAuthorizer(overrides?: CallOverrides): Promise<string>;

    getPoolTokens(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; balances: BigNumber[] }
    >;

    registerPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    registerTokens(
      poolId: BytesLike,
      tokens: string[],
      arg2: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    PoolBalanceChanged(
      poolId?: BytesLike | null,
      liquidityProvider?: string | null,
      tokens?: null,
      deltas?: null,
      protocolFees?: null
    ): TypedEventFilter<
      [string, string, string[], BigNumber[], BigNumber[]],
      {
        poolId: string;
        liquidityProvider: string;
        tokens: string[];
        deltas: BigNumber[];
        protocolFees: BigNumber[];
      }
    >;

    Swap(
      poolId?: BytesLike | null,
      tokenIn?: string | null,
      tokenOut?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { poolId: string; tokenIn: string; tokenOut: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    callExitPool(
      poolAddress: string,
      poolId: BytesLike,
      recipient: string,
      currentBalances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callJoinPool(
      poolAddress: string,
      poolId: BytesLike,
      recipient: string,
      currentBalances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callMinimalPoolSwap(
      pool: string,
      request: {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      balanceTokenIn: BigNumberish,
      balanceTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAuthorizer(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolTokens(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerTokens(
      poolId: BytesLike,
      tokens: string[],
      arg2: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    callExitPool(
      poolAddress: string,
      poolId: BytesLike,
      recipient: string,
      currentBalances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callJoinPool(
      poolAddress: string,
      poolId: BytesLike,
      recipient: string,
      currentBalances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callMinimalPoolSwap(
      pool: string,
      request: {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      balanceTokenIn: BigNumberish,
      balanceTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAuthorizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolTokens(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerTokens(
      poolId: BytesLike,
      tokens: string[],
      arg2: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
